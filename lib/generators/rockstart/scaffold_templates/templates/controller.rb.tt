<%% if namespaced? -%>
require_dependency "<%%= namespaced_path %>/application_controller"

<%% end -%>
<%% module_namespacing do -%>
class <%%= controller_class_name %>Controller < ApplicationController
<%- if pundit? -%>
  include PunditErrorHandling

<%- end -%>
<%- if devise? -%>
  before_action :authenticate_user!
<%- end -%>
  before_action :assign_<%%= singular_table_name %>, only: [:show, :edit, :update, :destroy]
<%- if pundit? -%>
  after_action :verify_authorized
  after_action :verify_policy_scoped, except: [:new, :create]
<%- end -%>

  # GET <%%= route_url %>
  def index
<%- if pundit? -%>
    authorize <%%= class_name %>
    @<%%= plural_table_name %> = policy_scope(<%%= class_name %>)
<%- else -%>
    @<%%= plural_table_name %> = <%%= orm_class.all(class_name) %>
<%- end -%>
  end

  # GET <%%= route_url %>/1
  def show
<%- if pundit? -%>
    authorize @<%%= singular_table_name %>
<%- end -%>
  end

  # GET <%%= route_url %>/new
  def new
    @<%%= singular_table_name %> = <%%= orm_class.build(class_name) %>
<%- if pundit? -%>
    authorize @<%%= singular_table_name %>
<%- end -%>
  end

  # GET <%%= route_url %>/1/edit
  def edit
<%- if pundit? -%>
    authorize @<%%= singular_table_name %>
<%- end -%>
  end

  # POST <%%= route_url %>
  def create
    @<%%= singular_table_name %> = <%%= orm_class.build(class_name, "#{singular_table_name}_params") %>
<%- if pundit? -%>
    authorize @<%%= singular_table_name %>
<%- end -%>

    if @<%%= orm_instance.save %>
      redirect_to <%%= redirect_resource_name %>, notice: <%%= "'#{human_name} was successfully created.'" %>
    else
      render :new
    end
  end

  # PATCH/PUT <%%= route_url %>/1
  def update
<%- if pundit? -%>
    authorize @<%%= singular_table_name %>

<%- end -%>
    if @<%%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%%= redirect_resource_name %>, notice: <%%= "'#{human_name} was successfully updated.'" %>
    else
      render :edit
    end
  end

  # DELETE <%%= route_url %>/1
  def destroy
<%- if pundit? -%>
    authorize @<%%= singular_table_name %>

<%- end -%>
    @<%%= orm_instance.destroy %>
    redirect_to <%%= index_helper %>_url, notice: <%%= "'#{human_name} was successfully destroyed.'" %>
  end

<%- if pundit? -%>
  protected

  def authentication_failed_redirect_path_for(_resource)
    if @<%%= singular_table_name %> && policy(@<%%= singular_table_name %>).show?
      @<%%= singular_table_name %>
    elsif policy(<%%= class_name %>).index?
      <%%= index_helper %>_url
    else
      super
    end
  end

<%- end -%>
  private
    # Use callbacks to share common setup or constraints between actions.
    def assign_<%%= singular_table_name %>
<%- if pundit? -%>
      @<%%= singular_table_name %> = <%%= orm_class.find("policy_scope(#{class_name})", "params[:id]") %>
<%- else -%>
      @<%%= singular_table_name %> = <%%= orm_class.find(class_name, "params[:id]") %>
<%- end -%>
    end

    # Only allow a trusted parameter "white list" through.
    def <%%= "#{singular_table_name}_params" %>
<%- if pundit? -%>
      permitted_attributes(@<%%= singular_table_name %> || <%%= class_name %>)
<%- else -%>
      <%%- if attributes_names.empty? -%>
      params.fetch(:<%%= singular_table_name %>, {})
      <%%- else -%>
      params.require(:<%%= singular_table_name %>).permit(<%%= permitted_params %>)
      <%%- end -%>
<%- end -%>
    end
end
<%% end -%>
