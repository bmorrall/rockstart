# frozen_string_literal: true

# Utility functions used with Lograge generated by rockstart:security:lograge
module LogrageUtil
  class << self
    # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
    # format a throttle.rack_attack message from rack:attack
    def format_rack_attack_throttle(name, start, finish, request_id, payload)
      req = payload[:request]
      matched_rule = req.env["rack.attack.matched"]

      filter_parameters = Rails.application.config.filter_parameters
      params = ActiveSupport::ParameterFilter.new(filter_parameters).filter(req.params)

      message_payload = {
        method: req.request_method,
        path: req.path,
        format: params[:format] || "html",
        controller: Rack::Attack.name,
        action: "#{name}[#{matched_rule}]",
        status: 429,
        duration: (finish - start).to_f.round(2),
        params: params.except("controller", "action", "format", "id"),
        host: req.host,
        remote_ip: req.ip,
        request_id: request_id
      }
      Lograge.lograge_config.formatter.call(message_payload)
    end
    # rubocop:enable Metrics/AbcSize, Metrics/MethodLength
  end
end
