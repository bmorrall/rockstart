# frozen_string_literal: true

require "rails_helper"

RSpec.describe "Rack::Attack", type: :request do
  describe "req/ip throttle" do
    it "rate limits requests from spammy clients" do
      300.times do
        get root_url
        expect(response).not_to have_http_status(:too_many_requests)
      end

      get root_url
      expect(response).to have_http_status(:too_many_requests)
    end
  end
<%- if devise? -%>

  describe "logins/ip throttle" do
    it "rate limits login requests based off ip address" do
      5.times do
        post new_user_session_path, params: {
          user: {
            email: Faker::Internet.email,
            password: Faker::Internet.password
          }
        }
      end

      post new_user_session_path, params: {
        user: {
          email: Faker::Internet.email,
          password: Faker::Internet.password
        }
      }
      expect(response).to have_http_status(:too_many_requests)
    end
  end

  describe "logins/email throttle" do
    it "rate limits login requests based off email address" do
      valid_email_parameters = {
        user: {
          email: Faker::Internet.email,
          password: Faker::Internet.password
        }
      }

      5.times do |n|
        post new_user_session_path, params: valid_email_parameters, headers: {
          "REMOTE_ADDR" => format("120.0.1.%<n>d", n: n)
        }
      end

      post new_user_session_path, params: valid_email_parameters
      expect(response).to have_http_status(:too_many_requests)
    end
  end

  describe "registrations/ip throttle" do
    it "rate limits regstration requests based off ip address" do
      5.times do
        put user_registration_path, params: update_user_email_params
      end

      put user_registration_path, params: update_user_email_params
      expect(response).to have_http_status(:too_many_requests)
    end
  end
<%- end -%>

  describe "fail2ban/pentesters blocklist" do
    it "globally rate limits pentesters attempting to retrieve passwords" do
      3.times do
        get "/etc/passwd"
        expect(response).to have_http_status(:forbidden)
      end

      get root_url
      expect(response).to have_http_status(:forbidden)
    end

    it "globally rate limits pentesters attempting to retrieve passwords from a query" do
      3.times do
        get "/bad_endpoint?secret_file=/etc/passwd"
        expect(response).to have_http_status(:forbidden)
      end

      get root_url
      expect(response).to have_http_status(:forbidden)
    end

    it "globally rate limits pentesters testing for wordpress admin pages" do
      3.times do
        get "/wp-admin"
        expect(response).to have_http_status(:forbidden)
      end

      get root_url
      expect(response).to have_http_status(:forbidden)
    end

    it "globally rate limits pentesters testing for wordpress login pages" do
      3.times do
        get "/wp-login"
        expect(response).to have_http_status(:forbidden)
      end

      get root_url
      expect(response).to have_http_status(:forbidden)
    end

    it "globally rate limits pentesters searching for php endpoints" do
      3.times do
        get "/example.php"
        expect(response).to have_http_status(:forbidden)
      end

      get root_url
      expect(response).to have_http_status(:forbidden)
    end

    it "groups all pentested routes together" do
      get "/etc/passwd"
      get "/bad_endpoint?secret_file=/etc/passwd"
      get "/wp-admin"

      get root_url
      expect(response).to have_http_status(:forbidden)

      Rails.cache.clear

      get "/wp-login"
      get "/example.php"

      get root_url
      expect(response).not_to have_http_status(:forbidden)

      get "/example.php"

      get root_url
      expect(response).to have_http_status(:forbidden)
    end
  end
end
