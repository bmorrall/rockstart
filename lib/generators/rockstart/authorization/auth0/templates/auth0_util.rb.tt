# frozen_string_literal: true

module Utils
  # Utilities for interacting with Auth0 generated by rockstart:auth0
  module Auth0
    class << self
      # Generates an auth0 client
      def auth0_client
        require "auth0"

        @auth0_client ||= Auth0Client.new(
          client_id: ENV['AUTH0_CLIENT_ID'],
          client_secret: ENV['AUTH0_CLIENT_SECRET'],
          domain: ENV['AUTH0_DOMAIN'],
          api_version: 2,
          timeout: 10
        )
      end

      # Generates a logout redirect url
      def logout_url(redirect_to:)
        domain = ENV.fetch("AUTH0_DOMAIN")
        client_id = ENV.fetch("AUTH0_CLIENT_ID")
        request_params = {
          returnTo: redirect_to,
          client_id: client_id
        }
        URI::HTTPS.build(host: domain, path: "/v2/logout", query: to_query(request_params))
      end

      # Remove all unused properties provided by OmniAuth
      def filter_userinfo(raw_userinfo)
        raw_userinfo.slice(:provider, :uid, :info, :raw_info).tap do |userinfo|
          # Include basic user information
          userinfo[:info] = userinfo.fetch(:info, {}).slice(:name, :nickname, :image)

          # Include custom roles array provided by auth0
          userinfo[:raw_info] = userinfo.fetch(:raw_info, {}).slice("http://<%= app_name %>/roles")
        end.deep_stringify_keys
      end

      private

      def to_query(hash)
        hash.map { |k, v| "#{k}=#{CGI.escape(v)}" unless v.nil? }.reject(&:nil?).join("&")
      end
    end
  end
end
